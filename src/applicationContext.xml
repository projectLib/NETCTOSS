<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"  
	xmlns:jee="http://www.springframework.org/schema/jee" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd">
	
	<!-- 配置:让Spring管理数据库连接池对象 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="#{db.driver}"/>
		<property name="url" value="#{db.url}"/>
		<property name="username" value="#{db.user}"/>
		<property name="password" value="#{db.pwd}"/>
		<property name="initialSize" value="#{db.initSize}"/><!-- #{db.initSize}初始连接数 -->
		<property name="maxActive" value="#{db.maxActive}"/><!-- 最大连接数 -->
	</bean>
	<!-- 读取jdbc配置文件 -->
	<util:properties id="db" location="classpath:db.properties"/>
	
	<!-- 配置SqlSessionFactory -->
	<!-- 配置MyBatis SqlSessionFactoryBean是SqlSessionFactory的工厂bean，会自动创建SqlSessionFactory对象 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
      	<property name="dataSource" ref="dataSource" />
      	<!-- 指定扫描哪些路径下的配置文件 -->
     	<property name="mapperLocations" value="classpath:com/chenqf/entity/*.xml"/>
    </bean>
    
    <!-- 有Spring管理Mapper接口的实例 -->
	<!-- MapperFactoryBean相当于OEM工厂根据指定的参数mapperInterface类决定生成对象的类型，这里生成的是DeptMapper类型的对象 -->
	<!-- 
	<bean id="deptMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<property name="mapperInterface" value="com.chenqf.entity.DeptMapper"/>
		<property name="sqlSessionFactory" ref="sqlSessionFactory"/>
	</bean>
	 -->
    
    <!-- 配置MyBatis注解 -->
    <!-- 
    	在Spring容器初始化时，Spring会自动创建
    	MapperScannerConfigurer，然后自动调用
    	它扫描指定包下，带有指定注解的接口，然后
    	自动实现这个接口，在实现类中它主要封装了
    	创建连接、关闭练级、开启事务、关闭事务
    	的代码，这样在开发时就可以简化了。
     -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
       <!-- 指定MapperScannerConfigurer要扫描的包 -->
       <property name="basePackage" value="com.chenqf.dao" />
       <!-- 指定MapperScannerConfigurer要扫描的注解，该注解需要自定义。 -->
       <property name="annotationClass" 
           value="com.chenqf.annotation.MyBatisRepository"/>
	</bean>
	
	<!-- 配置SqlSessionTemplate -->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<!-- 构造器注入 -->
		<constructor-arg index="0" ref="sqlSessionFactory"/>
	</bean>
	
	<!-- 开启IOC的注解扫描，自动组件扫描，注解才能正常工作 -->
	<context:component-scan base-package="com.chenqf"/>
	<!-- 开启Spring mvs注解扫描 -->
	<mvc:annotation-driven/>
	
	<bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/" />
	 	<property name="suffix" value=".jsp"/>
	</bean>
	
	<!-- 拦截器 -->
	<mvc:interceptors>
		<!-- 登录检查拦截器 -->
		<mvc:interceptor>
			<!-- 可以拦截一切请求 -->
			<mvc:mapping path="/**"/>
			<!-- 排除登录方法，应包括登录成功
				之前的调用所有方法 -->
			<mvc:exclude-mapping path="/main/toLogin.do"/>
			<mvc:exclude-mapping path="/main/checkLogin.do"/>
			<mvc:exclude-mapping path="/main/createImage.do"/>
			<!-- 声明拦截器组件 -->
			<bean class="com.chenqf.interceptor.CheckLoginInterceptor"/>
		</mvc:interceptor>
		
		<!-- 判断当前模块 拦截器 -->
		<mvc:interceptor>
			<mvc:mapping path="/**"/>
			<bean class="com.chenqf.interceptor.CurrentModuleInterceptor"/>
		</mvc:interceptor>
		
		<!-- 权限检查拦截器 -->
		<mvc:interceptor>
			<mvc:mapping path="/**"/>
			<mvc:exclude-mapping path="/main/*"/>
			<mvc:exclude-mapping path="/user/*"/>
			<bean class="com.chenqf.interceptor.CheckModuleInterceptor"/>
		</mvc:interceptor>
	</mvc:interceptors>
	
	<!-- 开启AOP注解扫描 -->
	<aop:aspectj-autoproxy  proxy-target-class="true"/>	
	
	<!-- 处理异常 -->
	<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<prop key="java.lang.Exception">main/error</prop>
			</props>
		</property>
	</bean>
	
	<!-- 声明事务管理组件 -->
    <bean id="txManager" 
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager"> 
        <property name="dataSource" ref="dataSource"/> 
    </bean>
    
    <!-- 开启事务注解扫描 -->
   <!-- <tx:annotation-driven transaction-manager="txManager" proxy-target-class="true"/>-->
    
    <!-- XML配置声明事务范围及类型 -->
	<tx:advice id="txAdvice" 
		transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="find*" read-only="true"/>
			<tx:method name="to*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="add*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
		</tx:attributes>
	</tx:advice>
	<aop:config proxy-target-class="true">
		<aop:advisor advice-ref="txAdvice"  
			pointcut="within(com.tarena.controller..*)" />
	</aop:config>
    
</beans>